// Название файла: todoList.ts

interface Todo {
  id: number;
  title: string;
  completed: boolean;
}

class TodoList {
  private todos: Todo[];

  constructor() {
    this.todos = [];
  }

  public addTodo(todo: Todo): void {
    this.todos.push(todo);
  }

  public removeTodo(todoId: number): void {
    this.todos = this.todos.filter((todo) => todo.id !== todoId);
  }

  public markAsCompleted(todoId: number): void {
    const todo = this.todos.find((todo) => todo.id === todoId);

    if (todo) {
      todo.completed = true;
    }
  }

  public getCompletedTodos(): Todo[] {
    return this.todos.filter((todo) => todo.completed);
  }

  public getIncompleteTodos(): Todo[] {
    return this.todos.filter((todo) => !todo.completed);
  }

  public printTodoList(): void {
    console.log("Todo List:");
    this.todos.forEach((todo) => {
      const status = todo.completed ? "[x]" : "[ ]";
      console.log(`${status} ${todo.title}`);
    });
  }
}

// Пример использования класса TodoList:
const todoList = new TodoList();
todoList.addTodo({ id: 1, title: "Task 1", completed: false });
todoList.addTodo({ id: 2, title: "Task 2", completed: true });
todoList.addTodo({ id: 3, title: "Task 3", completed: false });
todoList.markAsCompleted(1); // Пометить задачу с идентификатором 1 как выполненную
todoList.removeTodo(2); // Удалить задачу с идентификатором 2
todoList.printTodoList();

